// Generated by Top2HPlus using FeynHiggs input
// http://cmsdoc.cern.ch/~slehti/Top2HPlus.git

#include <vector>

double fitFunction(double *x,double *par){
  return par[0] + par[1]*x[0] + par[2]*x[0]*x[0] + par[3]*x[0]*x[0]*x[0] + par[4]*x[0]*x[0]*x[0]*x[0];
}

struct Parameters {
  void clear(){ mass = 0; mu = 0; fitParameters.clear();}
  double mass;
  double mu;
  std::vector<double> fitParameters;
};

double BR_top_Hplus_function(double mass,double tanb,double mu){
  std::vector<Parameters> fPars;
  Parameters fPar;
  fPar.mass = 90;
  fPar.mu   = -1000;
  fPar.fitParameters.push_back(0.0985172);
  fPar.fitParameters.push_back(-0.0247471);
  fPar.fitParameters.push_back(0.00265363);
  fPar.fitParameters.push_back(-0.000109054);
  fPar.fitParameters.push_back(1.95841e-06);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 90;
  fPar.mu   = -200;
  fPar.fitParameters.push_back(0.0687623);
  fPar.fitParameters.push_back(-0.0132968);
  fPar.fitParameters.push_back(0.00114658);
  fPar.fitParameters.push_back(-3.1187e-05);
  fPar.fitParameters.push_back(3.54542e-07);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 90;
  fPar.mu   = 200;
  fPar.fitParameters.push_back(0.0554394);
  fPar.fitParameters.push_back(-0.00912394);
  fPar.fitParameters.push_back(0.000723266);
  fPar.fitParameters.push_back(-1.65895e-05);
  fPar.fitParameters.push_back(1.46629e-07);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 90;
  fPar.mu   = 1000;
  fPar.fitParameters.push_back(0.0276914);
  fPar.fitParameters.push_back(-0.00220733);
  fPar.fitParameters.push_back(0.000187313);
  fPar.fitParameters.push_back(-2.8357e-06);
  fPar.fitParameters.push_back(1.43388e-08);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 100;
  fPar.mu   = -1000;
  fPar.fitParameters.push_back(0.0638324);
  fPar.fitParameters.push_back(-0.0132786);
  fPar.fitParameters.push_back(0.00120672);
  fPar.fitParameters.push_back(-3.46559e-05);
  fPar.fitParameters.push_back(5.39832e-07);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 100;
  fPar.mu   = -200;
  fPar.fitParameters.push_back(0.0443822);
  fPar.fitParameters.push_back(-0.00700602);
  fPar.fitParameters.push_back(0.000544256);
  fPar.fitParameters.push_back(-9.66258e-06);
  fPar.fitParameters.push_back(7.73984e-08);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 100;
  fPar.mu   = 200;
  fPar.fitParameters.push_back(0.0335062);
  fPar.fitParameters.push_back(-0.00420648);
  fPar.fitParameters.push_back(0.000324977);
  fPar.fitParameters.push_back(-5.03274e-06);
  fPar.fitParameters.push_back(2.9173e-08);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 100;
  fPar.mu   = 1000;
  fPar.fitParameters.push_back(0.0179416);
  fPar.fitParameters.push_back(-0.000845534);
  fPar.fitParameters.push_back(0.000104627);
  fPar.fitParameters.push_back(-1.35791e-06);
  fPar.fitParameters.push_back(5.66083e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 120;
  fPar.mu   = -1000;
  fPar.fitParameters.push_back(0.0328181);
  fPar.fitParameters.push_back(-0.00591343);
  fPar.fitParameters.push_back(0.000489821);
  fPar.fitParameters.push_back(-1.04471e-05);
  fPar.fitParameters.push_back(1.87586e-07);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 120;
  fPar.mu   = -200;
  fPar.fitParameters.push_back(0.0216819);
  fPar.fitParameters.push_back(-0.00277865);
  fPar.fitParameters.push_back(0.000208885);
  fPar.fitParameters.push_back(-2.02234e-06);
  fPar.fitParameters.push_back(1.06398e-08);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 120;
  fPar.mu   = 200;
  fPar.fitParameters.push_back(0.0138984);
  fPar.fitParameters.push_back(-0.00116534);
  fPar.fitParameters.push_back(0.00011455);
  fPar.fitParameters.push_back(-1.13546e-06);
  fPar.fitParameters.push_back(3.95464e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 120;
  fPar.mu   = 1000;
  fPar.fitParameters.push_back(0.0113557);
  fPar.fitParameters.push_back(-0.000560057);
  fPar.fitParameters.push_back(6.58074e-05);
  fPar.fitParameters.push_back(-8.34772e-07);
  fPar.fitParameters.push_back(3.44139e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 140;
  fPar.mu   = -1000;
  fPar.fitParameters.push_back(0.0149901);
  fPar.fitParameters.push_back(-0.00276264);
  fPar.fitParameters.push_back(0.000243568);
  fPar.fitParameters.push_back(-6.44406e-06);
  fPar.fitParameters.push_back(1.28403e-07);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 140;
  fPar.mu   = -200;
  fPar.fitParameters.push_back(0.00808416);
  fPar.fitParameters.push_back(-0.000827447);
  fPar.fitParameters.push_back(6.51892e-05);
  fPar.fitParameters.push_back(-2.07123e-07);
  fPar.fitParameters.push_back(1.05468e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 140;
  fPar.mu   = 200;
  fPar.fitParameters.push_back(0.00638066);
  fPar.fitParameters.push_back(-0.000511053);
  fPar.fitParameters.push_back(4.95219e-05);
  fPar.fitParameters.push_back(-4.34208e-07);
  fPar.fitParameters.push_back(1.44677e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 140;
  fPar.mu   = 1000;
  fPar.fitParameters.push_back(0.00532984);
  fPar.fitParameters.push_back(-0.000267116);
  fPar.fitParameters.push_back(2.99772e-05);
  fPar.fitParameters.push_back(-3.71904e-07);
  fPar.fitParameters.push_back(1.51761e-09);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 160;
  fPar.mu   = -1000;
  fPar.fitParameters.push_back(0.00367507);
  fPar.fitParameters.push_back(-0.000785284);
  fPar.fitParameters.push_back(7.48898e-05);
  fPar.fitParameters.push_back(-2.52769e-06);
  fPar.fitParameters.push_back(4.38248e-08);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 160;
  fPar.mu   = -200;
  fPar.fitParameters.push_back(0.00140703);
  fPar.fitParameters.push_back(-0.000120975);
  fPar.fitParameters.push_back(1.01865e-05);
  fPar.fitParameters.push_back(-3.19246e-08);
  fPar.fitParameters.push_back(5.86418e-10);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 160;
  fPar.mu   = 200;
  fPar.fitParameters.push_back(0.00120392);
  fPar.fitParameters.push_back(-8.32794e-05);
  fPar.fitParameters.push_back(8.04555e-06);
  fPar.fitParameters.push_back(-6.33846e-08);
  fPar.fitParameters.push_back(2.11754e-10);
  fPars.push_back(fPar);
  fPar.clear();

  fPar.mass = 160;
  fPar.mu   = 1000;
  fPar.fitParameters.push_back(0.00104647);
  fPar.fitParameters.push_back(-4.83105e-05);
  fPar.fitParameters.push_back(5.11786e-06);
  fPar.fitParameters.push_back(-6.23927e-08);
  fPar.fitParameters.push_back(2.5272e-10);
  fPars.push_back(fPar);
  fPar.clear();

  Parameters massMuPoint;
  for(int i = 0; i < fPars.size(); ++i){
    if(fPars[i].mass != mass || fPars[i].mu != mu) continue;
    massMuPoint = fPars[i];
  }

  int nPar = massMuPoint.fitParameters.size();
  double parameters[nPar];
  for(int i = 0; i < nPar; ++i){
    parameters[i] = massMuPoint.fitParameters[i];
  }

  return fitFunction(&tanb,parameters);
}
