#!/usr/bin/env python

import os
import re
import sys
from optparse import OptionParser

import ROOT
ROOT.gROOT.SetBatch(True)
ROOT.PyConfig.IgnoreCommandLineOptions = True

re_vector = re.compile("vector<(?P<type>.*)>")

def trimLines(lines):
    output = []
    i = 0
    for l in lines:
        i += 1
        if "mgr.book(" in l:
            output.append("%d:%s"%(i,l))
    return output

def readDataformats():
    # interfaces
    mypath = os.path.join(os.getenv("HIGGSANALYSIS_BASE"), "NtupleAnalysis/src/DataFormat/interface")
    l = os.listdir(mypath)
    files = {}
    for item in l:
        if item.endswith(".h"):
            f = open(os.path.join(mypath, item), "r")
            files[item] = trimLines(f.readlines())
            f.close()
    # sources
    mypath = os.path.join(os.getenv("HIGGSANALYSIS_BASE"), "NtupleAnalysis/src/DataFormat/src")
    l = os.listdir(mypath)
    for item in l:
        if item.endswith(".cc"):
            f = open(os.path.join(mypath, item), "r")
            files[item] = trimLines(f.readlines())
            f.close()
    return files

def findImplementation(files, name):
    for key in files.keys():
        if key.endswith("Generated.cc"):
            for line in files[key]:
                newname = name.replace(key.replace("Generated.cc","")+"s_","")
                if '"_%s"'%(newname) in line:
                    s = line.split(":")
                    return "\033[1;32m"+"Autogenerated (%s line %s)"%(key,s[0])+"\033[0;0m"
        else:
            for line in files[key]:
                if '"%s"'%(name) in line:
                    s = line.split(":")
                    return "\033[1;32m"+"Implemented (%s line %s)"%(key,s[0])+"\033[0;0m"
    # Four-vector items
    for line in files["Particle.h"]:
        s = name.split("_")
        if len(s) > 1 and ('"_%s"'%(s[len(s)-1]) in line) and (not "MET" in name):
            n = line.split(":")
            return "\033[1;32m"+"Autogenerated (%s line %s)"%("Particle.h",n[0])+"\033[0;0m"
    # Two-vector items
    for line in files["MET.h"]:
        if "MET" in name:
            s = name.split("_")
            if len(s)>1 and '"_%s"'%(s[len(s)-1]) in line:
                n = line.split(":")
                return "\033[1;32m"+"Implemented (%s line %s)"%("MET.h",n[0])+"\033[0;0m"

    return "\033[1;31m"+"Missing impl."+"\033[0;0m"

def main(opts, args):
    if not "HIGGSANALYSIS_BASE" in os.environ:
        print "Environment variable $HIGGSANALYSIS_BASE not set, please source setup.sh"
        return 1

    f = ROOT.TFile.Open(args[0])
    tree = f.Get(opts.tree)
    types = {}
    for branch in tree.GetListOfBranches():
        t = branch.GetClassName() # objects
        if t == "":
            t = branch.GetListOfLeaves()[0].GetTypeName() # basic types
        types[branch.GetName()] = t
    f.Close()
    
    files = readDataformats()
    
    w = 0
    w2 = 0
    for k in types.keys():
        w = max(w,len(types[k]))
        w2 = max(w2,len(k))
    
    keys = types.keys()
    keys.sort()
    
    tmpl = "%"+str(w)+"s   %s   %s"
    print tmpl%("Type","Branch name".ljust(w2),"Implementation")
    s = ""
    for i in range(w+w2+6+40):
        s += "="
    print s
    for k in keys:
        print tmpl%(types[k],k.ljust(w2),findImplementation(files, k))
    return 0
    
if __name__ == "__main__":
    parser = OptionParser(usage="Usage: %prog [options] root_file")
    parser.add_option("--tree", dest="tree", default="Events",
                      help="Decypher data format from this tree ")
    (opts, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("You should give exactly one root_file, got %d" % len(args))


    sys.exit(main(opts, args))
