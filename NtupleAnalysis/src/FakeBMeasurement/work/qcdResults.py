#!/usr/bin/env python
'''
Description:
1) Generate a pseudo-multicrab directory by running the QCDMeasurement analyzer: (3-4 hours)
   a) Edit run.py to customise running parameters
   b) Run the analyzer with the following command:
      ./run.py -m <multicrab_dir>
   c) Depending on whether variations are added or not this can take 3-4 h without systematics (!)
   d) OUTPUT: A pseudo-multicrab dir under the work directory <pseudomulticrab_dir>

2) Generate the QCDInvertedNormalizationFactors.py file by running a plotting/fitting script:
   a) ./plotQCD_Fit.py -m <pseudomulticrab_dir> -e "QCD|Charged" --mergeEWK -o <OptMode>
   b) Part a) will automatically generate this file which will contain the results  of fitting to the 
      Baseline Data the templates m_{jjb} shapes from the QCD (Inverted Data) and EWK (Baseline MC).
   c) Results include the fit details for each shape and the QCD NormFactor for moving from the Control
      Region (CR) to the Signal Region (SR).
   d) OUTPUT: The aforementioned python file and a folder with the histogram ROOT files and the individual
              fits. The foler name will be normalisationPlots/<OptsMode> and will be placed inside the 
              <pseudomulticrab_dir>. The autogenerated file file be place in the cwd (i.e. work/)
              
3) Run the qcdResults.py scripts: (< 1m)


4) Calculate the final result (i.e. produce pseudo-multicrab): (30 mins. with systematics)
   ./makeQCDInvertedPseudoMulticrabForDatacards.py --mdir path_to_QCDresultdir <--inclusiveonly> <--qcdonly>
   - This takes the result directory created in step (2) and the corresponding normalisation 
     coefficient file produced in step (3)
   - The results are stored into a directory starting with pseudoMulticrab_ (the various 1pr/2pr/3pr 
     suffixes are included in the filename)
   - The user may calculate the final result based on the phase space binning (default option) or based
     on the inclusive bin (i.e. disable phase space binning) by using the parameter --inclusiveonly
   - The user may use the normalisation coefficients for both QCD and EWK fake taus (default) or just the
     coefficient for QCD (use parameter --qcdonly; this should be used only for testing purposes)

5) Limit calculation:


Usage:


Examples:
./qcdResults.py --mcrabSR /uscms_data/d3/aattikis/workspace/pseudo-multicrab/Hplus2tbAnalysis_170712_013825/ --mcrabCR /uscms_data/d3/aattikis/workspace/pseudo-multicrab/FakeBMeasurement_170629_102740_FakeBBugFix_TopChiSqrVar/

Last Used:
./qcdResults.py --mcrabSR /uscms_data/d3/aattikis/workspace/pseudo-multicrab/Hplus2tbAnalysis_170712_013825/ --mcrabCR /uscms_data/d3/aattikis/workspace/pseudo-multicrab/FakeBMeasurement_170629_102740_FakeBBugFix_TopChiSqrVar/

Fit options:
https://root.cern.ch/root/htmldoc/guides/users-guide/FittingHistograms.html#the-th1fit-method
"0" Fit, store function but do not draw (needed since we re-draw the fit customised!)
"E" Better error estimation using MINOS technique
"R" Use the range specified in the function range
"B" Use this option when you want to fix one or more parameters and the fitting function is a predefined one, 
    like polN, expo, landau, gaus. Note that in case of pre-defined functions some default initial values and limits are set.
"L" Use log likelihood method (default is chi-square method). To be used when the histogram represents counts
"W" Set all weights to 1 for non empty bins; ignore error bars
"M" More. Improve fit results, by using the IMPROVE algorithm of TMinuit.
"Q" To suppress output (Quiet Mode)
"S" To return fit results (see "HLTausAnalysis/NtupleAnalysis/src/Auxiliary/src/HistoTools.C")
'''

#================================================================================================ 
# Imports
#================================================================================================ 
import sys
import math
import copy
import os
from optparse import OptionParser

import ROOT
ROOT.gROOT.SetBatch(True)
from ROOT import *

import HiggsAnalysis.NtupleAnalysis.tools.dataset as dataset
import HiggsAnalysis.NtupleAnalysis.tools.histograms as histograms
import HiggsAnalysis.NtupleAnalysis.tools.counter as counter
import HiggsAnalysis.NtupleAnalysis.tools.tdrstyle as tdrstyle
import HiggsAnalysis.NtupleAnalysis.tools.styles as styles
import HiggsAnalysis.NtupleAnalysis.tools.plots as plots
import HiggsAnalysis.NtupleAnalysis.tools.crosssection as xsect
import HiggsAnalysis.NtupleAnalysis.tools.multicrabConsistencyCheck as consistencyCheck
import HiggsAnalysis.FakeBMeasurement.QCDNormalization as QCDNormalization
import QCDInvertedNormalizationFactors as fitResults


#================================================================================================ 
# Function Definition
#================================================================================================ 
def Print(msg, printHeader=False):
    fName = __file__.split("/")[-1]
    if printHeader==True:
        print "=== ", fName
        print "\t", msg
    else:
        print "\t", msg
    return


def Verbose(msg, printHeader=True, verbose=False):
    if not opts.verbose:
        return
    Print(msg, printHeader)
    return


def GetLumi(datasetsMgr):
    Verbose("Determininig Integrated Luminosity")
    
    lumi = 0.0
    for d in datasetsMgr.getAllDatasets():
        if d.isMC():
            continue
        else:
            lumi += d.getLuminosity()
    Verbose("Luminosity = %s (pb)" % (lumi), True)
    return lumi


def GetListOfEwkDatasets():
    Verbose("Getting list of EWK datasets")
    return ["TT", "WJetsToQQ_HT_600ToInf", "DYJetsToQQHT", "SingleTop", "TTWJetsToQQ", "TTZToQQ", "Diboson", "TTTT"]
    #return ["TT"]


def GetHistoKwargs(histoName):
    '''
    '''
    Verbose("Creating a map of histoName <-> kwargs")

    _opts = {}


    # Definitions
    _opts   = {"ymin": 1e0, "ymaxfactor": 1.2}
    _opts["xmax"] = 1500.0
    _rebinX = 2
    _units  = "GeV/c^{2}"

    # Define plotting options
    kwargs = {
        "xlabel"      : "m_{jjb} (%s)" % (_units),
        "ylabel"      : "Arbitrary Units / %s" % (_units),
        "log"         : False,
        "opts"        : _opts,
        "opts2"       : {"ymin": 0.0, "ymax": 2.0},
        "rebinX"      : 1,
        "ratio"       : False, 
        "cutBox"      : {"cutValue": 173.21, "fillColor": 16, "box": False, "line": True, "greaterThan": True},
        "cmsExtraText": "Preliminary",
        "ratioYlabel" : "Ratio",
        "ratioInvert" : False, 
        "addCmsText"  : True,
        "createLegend": {"x1": 0.62, "y1": 0.78, "x2": 0.92, "y2": 0.92},
        }
    return kwargs


def GetDatasetsFromDir(opts, mcrab, Hplus2tbAnalysis=True):
    Verbose("Getting datasets")
    
    if Hplus2tbAnalysis:
        opts.analysisName = "Hplus2tbAnalysis"
        
    else:
        opts.analysisName = "FakeBMeasurement"

    if (not opts.includeOnlyTasks and not opts.excludeTasks):
        datasets = dataset.getDatasetsFromMulticrabDirs([mcrab],
                                                        dataEra=opts.dataEra,
                                                        searchMode=opts.searchMode, 
                                                        analysisName=opts.analysisName,
                                                        optimizationMode=opts.optMode)
    elif (opts.includeOnlyTasks):
        datasets = dataset.getDatasetsFromMulticrabDirs([mcrab],
                                                        dataEra=opts.dataEra,
                                                        searchMode=opts.searchMode,
                                                        analysisName=opts.analysisName,
                                                        includeOnlyTasks=opts.includeOnlyTasks,
                                                        optimizationMode=opts.optMode)
    elif (opts.excludeTasks):
        datasets = dataset.getDatasetsFromMulticrabDirs([mcrab],
                                                        dataEra=opts.dataEra,
                                                        searchMode=opts.searchMode,
                                                        analysisName=opts.analysisName,
                                                        excludeTasks=opts.excludeTasks,
                                                        optimizationMode=opts.optMode)
    else:
        raise Exception("This should never be reached")
    return datasets
    

def main(opts):
    Verbose("main function")


    datasetMgrs  = {}

    # Setup managers for Signal Region (SR)
    opts.optMode = ""
    datasetsMgrSR = GetDatasetsFromDir(opts, opts.mcrabSR, True)
    datasetMgrs["SR"] = datasetsMgrSR

    # Setup managers for Control Region (CR)
    opts.optMode = "OptChiSqrCutValue100"
    datasetsMgrCR = GetDatasetsFromDir(opts, opts.mcrabCR, False)
    datasetMgrs["CR"] = datasetsMgrCR
    
    # For-Loop: All dataset managers
    for k in datasetMgrs.keys():

        datasetsMgr = datasetMgrs[k]
        datasetsMgr.updateNAllEventsToPUWeighted()
        datasetsMgr.loadLuminosities() # from lumi.json

        # Set/Overwrite cross-sections
        for d in datasetsMgr.getAllDatasets():
            if "ChargedHiggs" in d.getName():
                datasetsMgr.getDataset(d.getName()).setCrossSection(1.0) # ATLAS 13 TeV H->tb exclusion limits

        # Print the pseudo-multicrab settings/parameters?
        if 0:
            datasetsMgr.printSelections()
            PSets = datasetsMgr.getSelections()

        if opts.verbose:
            datasetsMgr.PrintCrossSections()
            datasetsMgr.PrintLuminosities()

        # Merge histograms (see NtupleAnalysis/python/tools/plots.py) 
        plots.mergeRenameReorderForDataMC(datasetsMgr) 
        
        # Remove datasets
        massPoints = ["180", "200", "220", "250", "300", "350", "400", "500", "800", "1000", "2000", "3000"]
        massPoints.remove(opts.signal) #keep only 1 mass point
        for m in massPoints:
            datasetsMgr.remove(filter(lambda name: "M_" + m in name, datasetsMgr.getAllDatasetNames()))
        datasetsMgr.remove(filter(lambda name: "QCD-b" in name, datasetsMgr.getAllDatasetNames()))

        # Re-order datasets (to make signal visible!)
        if k == "SR":
            ReorderToShowSignal(datasetsMgr, opts)
            
        # Merge EWK samples
        if k == "CR":
            datasetsMgr.merge("EWK", GetListOfEwkDatasets())
            
        # Print dataset information
        if k == "SR" or k == "CR":
            datasetsMgr.PrintInfo()
        
    # Apply TDR style
    style = tdrstyle.TDRStyle()
    style.setOptStat(True)
    style.setGridX(False)
    style.setGridY(False)
    
    # Define histograms to use
    baseline_hName  = "topSelection_/LdgTrijetMass_After"
    inverted_hName  = "ForFakeBMeasurement/Inverted_TopMassReco_LdgTrijetM_AfterAllSelections" #swith to identical histos!
    # baseline_hName  = "topSelection_/LdgTetrajetMass_After"
    # inverted_hName  = "ForFakeBMeasurement/Inverted_TopMassReco_LdgTetrajetMass_AfterAllSelections"

    # Plot the histograms
    PlotHistos(datasetMgrs, baseline_hName, inverted_hName, opts)
    return


def PlotHistos(datasetsMgrs, baseline_hName, inverted_hName, opts):
    Verbose("PlotAndFitTemplates()")

    datasetMgrSR = datasetsMgrs["SR"]
    datasetMgrCR = datasetsMgrs["CR"]

    # Sanity check
    if 0:
        for d in datasetMgrSR.getAllDatasets():
            print d.getName()
            
        for d in datasetMgrCR.getAllDatasets():
            print d.getName()
        
    # Create Data/MC plot
    p1 = plots.DataMCPlot(datasetMgrSR, baseline_hName)
    p2 = plots.DataMCPlot(datasetMgrCR, inverted_hName)

    # Get the histograms for SR
    Data_SR = p1.histoMgr.getHisto("Data").getRootHisto().Clone("Data_SR")
    QCD_SR  = p1.histoMgr.getHisto("QCD").getRootHisto()
    QCD_SR.Reset()

    # Get the histograms for CR
    Data_CR = p2.histoMgr.getHisto("Data").getRootHisto().Clone("Data_CR")
    EWK_CR  = p2.histoMgr.getHisto("EWK").getRootHisto().Clone("EWK_CR") 

    QCD_CR  = p2.histoMgr.getHisto("Data").getRootHisto().Clone("QCD_Data")
    QCD_CR.Add(EWK_CR, -1)    
    QCD_CR.Scale(fitResults.QCDNormalization["Inclusive"])
    
    QCD_SR = QCD_CR.Clone("QCD")
    #datasetMgrSR.getDataset("QCD").setRootHisto(QCD_SR)    
    
    # Switch QCD MC with QCD Measurement
    #datasetMgrSR.getDataset("QCD").setRootHisto(QCD_SR)
    #datasetMgrSR.getDataset("QCD").setRootHisto(QCD_SR)

    # replaceQCD(datasetMgrSR, datasetMgrCR, p2, QCD_SR, inverted_hName)
    #replaceQCDFromData(datasetMgrSR, datasetMgrCR.getDataset("Data"), datasetName="QCD")
    if 0:
        names = datasetMgrSR.getAllDatasetNames()
        datasetMgrSR.remove(["QCD"])
        datasetMgrSR.append(datasetMgrCR.getDataset("QCD").deepCopy())
        datasetMgrSR.selectAndReorder(names)
    
    # Apply styles
    p1.histoMgr.forHisto("QCD", styles.getFakeBStyle() )
    p1.histoMgr.setHistoDrawStyle("QCD"  , "HIST")
    p1.histoMgr.setHistoLegendStyle("QCD", "F")
    
    # Set legend labels
    p1.histoMgr.setHistoLegendLabelMany({
            "QCD": "QCD (Data)",
            })
        
    # Customise histogram
    saveName = baseline_hName.replace("/", "_")
    saveName = saveName.replace("__", "_")
    _units   = "GeV/c^{2}"
    _opts    = {"ymin": 1e0, "ymaxfactor": 1.2}
    _opts["xmax"] = 800.0

    # Draw the histogram
    # plots.drawPlot(p1, saveName, **GetHistoKwargs(baseline_hName) ) #the "**" unpacks the kwargs_ 
    plots.drawPlot(p1,
                   saveName,
                   xlabel            = "m_{jjb} (%s)" % (_units),
                   ylabel            = "Events / %.0f " + _units,
                   rebinX            = 1,
                   ratioYlabel       = "Ratio",
                   ratio             = True,
                   stackMCHistograms = True,
                   ratioInvert       = False,
                   addMCUncertainty  = True,
                   addLuminosityText = True, 
                   addCmsText        = True, 
                   cmsExtraText      = "Preliminary",
                   opts              = _opts,
                   opts2             = {"ymin": 0.0, "ymax": 2.0},
                   log               = True,
                   moveLegend        = {"dx": -0.05, "dy": 0.0, "dh": 0.1},
                   cutBox            = {"cutValue": 173.21, "fillColor": 16, "box": False, "line": True, "greaterThan": True},
                   )

    # Save plot in all formats
    SavePlot(p1, saveName, os.path.join(opts.saveDir, "Results") ) 
    #SavePlot(p1, saveName, "") 
    return

def ReorderToShowSignal(datasetMgr, opts):

    signalSample = "ChargedHiggs_HplusTB_HplusToTB_M_" + opts.signal
    # Get list of dataset names
    names = datasetMgr.getAllDatasetNames()

    # Return the index in the list of the first dataset whose name is datasetName
    index = names.index(signalSample)

    # Remove the dataset at the given position in the list, and return it
    names.pop(index)

    # Insert the dataset to the given position  (index) of the list
    names.insert(1, signalSample)

    # Select and reorder Datasets
    datasetMgr.selectAndReorder(names)
    return

def replaceQCD(datasetMgrSR, datasetMgrCR, p2, histoQCD, histoName):

    # Set the new QCD in the datasetMgr for CR
    datasetMgrCR.rename("ChargedHiggs_HplusTB_HplusToTB_M_500", "QCD-Data")
    QCD = p2.histoMgr.getHisto("QCD").getRootHisto()
    #QCD = p2.histoMgr.getHisto("QCD").getRootHisto()
    #Data_CR = p2.histoMgr.getHisto("Data").getRootHisto().Clone("Data_CR")
    #print QCD.Integral()
    QCD.Reset()
    QCD = histoQCD
    datasetMgrCR.getDataset("QCD-Data").setRootHisto(QCD)

    # Append the new dataset to the datasetMgr for SR
    datasetMgrSR.append(datasetMgrCR.getDataset("QCD-Data")) 

    # Get list of dataset names
    names = datasetMgrSR.getAllDatasetNames()

    # Return the index in the list of the first dataset whose name is datasetName.
    index = names.index("QCD")

    # Remove the dataset at the given position in the list, and return it. 
    names.pop(index)
    
    # Insert the dataset to the given position  (index) of the list
    names.insert(index, "QCD-Data")

    # Remove from the dataset manager the datasetName
    datasetMgrSR.remove("QCD")

    # Append to the dataset manager the new dataset (QCD From Data)
    #datasetMgr.append(datasetQCDFromData)
    
    # Select and reorder Datasets. 
    # This method can be used to either select a set of dataset.Dataset objects. reorder them, or both.
    datasetMgrSR.selectAndReorder(names)
    return


def replaceQCDFromData(datasetMgr, datasetQCDFromData, datasetName="QCD"):

    # Get list of dataset names
    datasetMgr.append(datasetQCDFromData)
    names = datasetMgr.getAllDatasetNames()

    # Return the index in the list of the first dataset whose name is datasetName.
    index = names.index(datasetName)

    # Remove the dataset at the given position in the list, and return it. 
    names.pop(index)
    
    # Insert the dataset to the given position  (index) of the list
    names.insert(index, datasetQCDFromData.getName())

    # Remove from the dataset manager the datasetName
    datasetMgr.remove(datasetName)

    # Append to the dataset manager the new dataset (QCD From Data)
    datasetMgr.append(datasetQCDFromData)
    
    # Select and reorder Datasets. 
    # This method can be used to either select a set of dataset.Dataset objects. reorder them, or both.
    datasetMgr.selectAndReorder(names)
    return

def SavePlot(plot, plotName, saveDir, saveFormats = [".png", ".pdf"]):
    Verbose("Saving the plot in %s formats: %s" % (len(saveFormats), ", ".join(saveFormats) ) )

    # Check that path exists
    if saveDir != "":
        if not os.path.exists(saveDir):
            os.makedirs(saveDir)

        # Create the name under which plot will be saved
        saveName = os.path.join(saveDir, plotName.replace("/", "_"))
    else:
        saveName = plotName

    # For-loop: All save formats
    for i, ext in enumerate(saveFormats):
        saveNameURL = saveName + ext
        saveNameURL = saveNameURL.replace("/publicweb/a/aattikis/", "http://home.fnal.gov/~aattikis/")
        if opts.url:
            Print(saveNameURL, i==0)
        else:
            Print(saveName + ext, i==0)
        plot.saveAs(saveName, formats=saveFormats)
    return


#================================================================================================ 
# Main
#================================================================================================ 
if __name__ == "__main__":
    '''
    https://docs.python.org/3/library/argparse.html
 
    name or flags...: Either a name or a list of option strings, e.g. foo or -f, --foo.
    action..........: The basic type of action to be taken when this argument is encountered at the command line.
    nargs...........: The number of command-line arguments that should be consumed.
    const...........: A constant value required by some action and nargs selections.
    default.........: The value produced if the argument is absent from the command line.
    type............: The type to which the command-line argument should be converted.
    choices.........: A container of the allowable values for the argument.
    required........: Whether or not the command-line option may be omitted (optionals only).
    help............: A brief description of what the argument does.
    metavar.........: A name for the argument in usage messages.
    dest............: The name of the attribute to be added to the object returned by parse_args().
    '''
    
    # Default Settings
    SEARCHMODE   = "80to1000"
    DATAERA      = "Run2016"
    BATCHMODE    = True
    PRECISION    = 3
    INTLUMI      = -1.0
    SUBCOUNTERS  = False
    LATEX        = False
    MCONLY       = False
    URL          = False
    NOERROR      = True
    SAVEDIR      = "/publicweb/a/aattikis/FakeBMeasurement/"
    VERBOSE      = False
    HISTOLEVEL   = "Vital" # 'Vital' , 'Informative' , 'Debug'
    SIGNAL       = "500"

    # Define the available script options
    parser = OptionParser(usage="Usage: %prog [options]")

    parser.add_option("-s", "--mcrabSR", dest="mcrabSR", action="store", 
                      help="Path to the multicrab directory for input of Signal Region (SR)")

    parser.add_option("-c", "--mcrabCR", dest="mcrabCR", action="store", 
                      help="Path to the multicrab directory for input of Control Region (CR)")

    parser.add_option("-b", "--batchMode", dest="batchMode", action="store_false", default=BATCHMODE, 
                      help="Enables batch mode (canvas creation does NOT generate a window) [default: %s]" % BATCHMODE)

    parser.add_option("--mcOnly", dest="mcOnly", action="store_true", default=MCONLY,
                      help="Plot only MC info [default: %s]" % MCONLY)

    parser.add_option("--intLumi", dest="intLumi", type=float, default=INTLUMI,
                      help="Override the integrated lumi [default: %s]" % INTLUMI)

    parser.add_option("--searchMode", dest="searchMode", type="string", default=SEARCHMODE,
                      help="Override default searchMode [default: %s]" % SEARCHMODE)

    parser.add_option("--dataEra", dest="dataEra", type="string", default=DATAERA, 
                      help="Override default dataEra [default: %s]" % DATAERA)

    parser.add_option("--saveDir", dest="saveDir", type="string", default=SAVEDIR, 
                      help="Directory where all pltos will be saved [default: %s]" % SAVEDIR)

    parser.add_option("--url", dest="url", action="store_true", default=URL, 
                      help="Don't print the actual save path the histogram is saved, but print the URL instead [default: %s]" % URL)
    
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=VERBOSE, 
                      help="Enables verbose mode (for debugging purposes) [default: %s]" % VERBOSE)

    parser.add_option("--histoLevel", dest="histoLevel", action="store", default = HISTOLEVEL,
                      help="Histogram ambient level (default: %s)" % (HISTOLEVEL))

    parser.add_option("-i", "--includeOnlyTasks", dest="includeOnlyTasks", action="store", 
                      help="List of datasets in mcrab to include")

    parser.add_option("--signal", dest="signal", action="store", default = SIGNAL,
                      help="Signal mass point to include in plot. (default: %s)" % (SIGNAL))

    parser.add_option("-e", "--excludeTasks", dest="excludeTasks", action="store", 
                      help="List of datasets in mcrab to exclude")

    (opts, parseArgs) = parser.parse_args()

    # Require at least two arguments (script-name, path to multicrab)
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    if opts.mcrabSR == None:
        Print("Not enough arguments passed to script execution. Printing docstring & EXIT.")
        parser.print_help()
        #print __doc__
        sys.exit(1)

    if opts.mcrabCR == None:
        Print("Not enough arguments passed to script execution. Printing docstring & EXIT.")
        parser.print_help()
        #print __doc__
        sys.exit(1)

    # Call the main function
    main(opts)

    if not opts.batchMode:
        raw_input("=== plotQCD_Results.py: Press any key to quit ROOT ...")
