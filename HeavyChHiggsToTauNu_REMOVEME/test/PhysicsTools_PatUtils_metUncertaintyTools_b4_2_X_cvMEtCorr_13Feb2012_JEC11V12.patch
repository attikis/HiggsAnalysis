Index: PhysicsTools/PatUtils/python/tools/metUncertaintyTools.py
===================================================================
RCS file: /local/reps/CMSSW/CMSSW/PhysicsTools/PatUtils/python/tools/metUncertaintyTools.py,v
retrieving revision 1.9
diff -u -p -r1.9 metUncertaintyTools.py
--- PhysicsTools/PatUtils/python/tools/metUncertaintyTools.py	13 Feb 2012 14:13:13 -0000	1.9
+++ PhysicsTools/PatUtils/python/tools/metUncertaintyTools.py	5 Feb 2013 11:40:15 -0000
@@ -50,13 +50,15 @@ class RunMEtUncertainties(ConfigToolBase
                           "Flag to enable/disable that metUncertaintySequence is inserted into patDefaultSequence", Type=bool)
         self.addParameter(self._defaultParameters, 'outputModule', 'out',
                           "Module label of PoolOutputModule (empty label indicates no PoolOutputModule is to be configured)", Type=str)
+        self.addParameter(self._defaultParameters, 'postfix', '',
+                          "Technical parameter to identify the resulting sequence and its modules (allows multiple calls in a job)", Type=str)
         self._parameters=copy.deepcopy(self._defaultParameters)
         self._comment = ""
         
     def getDefaultParameters(self):
         return self._defaultParameters
 
-    def _addModuleToSequence(self, process, module, moduleName_parts, sequence):
+    def _addModuleToSequence(self, process, module, moduleName_parts, sequence, postfix):
 
         if not len(moduleName_parts) > 0:
             raise ValueError("Empty list !!")
@@ -81,6 +83,7 @@ class RunMEtUncertainties(ConfigToolBase
                     moduleName += part[0].lower() + part[1:]
                 lastPart = part    
 
+        moduleName += postfix
         setattr(process, moduleName, module)
 
         sequence += module
@@ -89,7 +92,7 @@ class RunMEtUncertainties(ConfigToolBase
 
     def _addSmearedJets(self, process, jetCollection, smearedJetCollectionName_parts,
                         jetSmearFileName, jetSmearHistogram, varyByNsigmas,
-                        shiftBy = None):
+                        shiftBy = None, postfix = ""):
 
         smearedJets = cms.EDProducer("SmearedPATJetProducer",
             src = cms.InputTag(jetCollection),
@@ -123,13 +126,13 @@ class RunMEtUncertainties(ConfigToolBase
         smearedJetCollection = \
           self._addModuleToSequence(process, smearedJets,
                                     smearedJetCollectionName_parts,
-                                    process.metUncertaintySequence)
+                                    getattr(process, "metUncertaintySequence"+postfix), postfix)
 
         return smearedJetCollection
         
     def _propagateMEtUncertainties(self, process,
                                    particleCollection, particleType, shiftType, particleCollectionShiftUp, particleCollectionShiftDown,
-                                   metProducer, sequence):
+                                   metProducer, sequence, postfix):
 
         # produce MET correction objects
         # (sum of differences in four-momentum between original and up/down shifted particle collection)
@@ -138,12 +141,14 @@ class RunMEtUncertainties(ConfigToolBase
             srcShifted = cms.InputTag(particleCollectionShiftUp)                                           
         )
         moduleMETcorrShiftUpName = "patPFMETcorr%s%sUp" % (particleType, shiftType)
+        moduleMETcorrShiftUpName += postfix
         setattr(process, moduleMETcorrShiftUpName, moduleMETcorrShiftUp)
         sequence += moduleMETcorrShiftUp
         moduleMETcorrShiftDown = moduleMETcorrShiftUp.clone(
             srcShifted = cms.InputTag(particleCollectionShiftDown)                                           
         )
         moduleMETcorrShiftDownName = "patPFMETcorr%s%sDown" % (particleType, shiftType)
+        moduleMETcorrShiftDownName += postfix
         setattr(process, moduleMETcorrShiftDownName, moduleMETcorrShiftDown)
         sequence += moduleMETcorrShiftDown
 
@@ -154,7 +159,14 @@ class RunMEtUncertainties(ConfigToolBase
                 cms.InputTag(moduleMETcorrShiftUpName)
             )
         )
-        moduleMETshiftUpName = "%s%s%sUp" % (metProducer.label(), particleType, shiftType)
+        metProducerLabel = metProducer.label()
+        if postfix != "":
+            if metProducerLabel[-len(postfix):] == postfix:
+                metProducerLabel = metProducerLabel[0:-len(postfix)]
+            else:
+                raise StandardError("Tried to remove postfix %s from label %s, but it wasn't there" % (postfix, metProducerLabel))
+        moduleMETshiftUpName = "%s%s%sUp" % (metProducerLabel, particleType, shiftType)
+        moduleMETshiftUpName += postfix
         setattr(process, moduleMETshiftUpName, moduleMETshiftUp)
         sequence += moduleMETshiftUp
         moduleMETshiftDown = moduleMETshiftUp.clone(
@@ -162,7 +174,8 @@ class RunMEtUncertainties(ConfigToolBase
                 cms.InputTag(moduleMETcorrShiftDownName)
             )
         )
-        moduleMETshiftDownName = "%s%s%sDown" % (metProducer.label(), particleType, shiftType)
+        moduleMETshiftDownName = "%s%s%sDown" % (metProducerLabel, particleType, shiftType)
+        moduleMETshiftDownName += postfix
         setattr(process, moduleMETshiftDownName, moduleMETshiftDown)
         sequence += moduleMETshiftDown
 
@@ -205,7 +218,8 @@ class RunMEtUncertainties(ConfigToolBase
                  jetCorrPayloadName      = None,
                  varyByNsigmas           = None,
                  addToPatDefaultSequence = None,
-                 outputModule            = None):
+                 outputModule            = None,
+                 postfix                 = None):
         electronCollection = self._initializeInputTag(electronCollection, 'electronCollection')
         photonCollection = self._initializeInputTag(photonCollection, 'photonCollection')
         muonCollection = self._initializeInputTag(muonCollection, 'muonCollection')
@@ -230,6 +244,8 @@ class RunMEtUncertainties(ConfigToolBase
             addToPatDefaultSequence = self._defaultParameters['addToPatDefaultSequence'].value
         if outputModule is None:
             outputModule = self._defaultParameters['outputModule'].value
+        if postfix is None:
+            postfix = self._defaultParameters['postfix'].value
 
         self.setParameter('electronCollection', electronCollection)
         self.setParameter('photonCollection', photonCollection)
@@ -246,6 +262,7 @@ class RunMEtUncertainties(ConfigToolBase
         self.setParameter('varyByNsigmas', varyByNsigmas)
         self.setParameter('addToPatDefaultSequence', addToPatDefaultSequence)
         self.setParameter('outputModule', outputModule)
+        self.setParameter('postfix', postfix)
   
         self.apply(process) 
         
@@ -265,8 +282,10 @@ class RunMEtUncertainties(ConfigToolBase
         varyByNsigmas = self._parameters['varyByNsigmas'].value
         addToPatDefaultSequence = self._parameters['addToPatDefaultSequence'].value
         outputModule = self._parameters['outputModule'].value
+        postfix = self._parameters['postfix'].value
 
-        process.metUncertaintySequence = cms.Sequence()
+        metUncertaintySequence = cms.Sequence()
+        setattr(process, "metUncertaintySequence"+postfix, metUncertaintySequence)
 
         collectionsToKeep = []
 
@@ -310,18 +329,18 @@ class RunMEtUncertainties(ConfigToolBase
         if doSmearJets:
             lastJetCollection = \
               self._addSmearedJets(process, cleanedJetCollection, [ "smeared", jetCollection.value() ],
-                                   jetSmearFileName, jetSmearHistogram, varyByNsigmas)
+                                   jetSmearFileName, jetSmearHistogram, varyByNsigmas, postfix=postfix)
                 
             jetCollectionResUp = \
               self._addSmearedJets(process, cleanedJetCollection, [ "smeared", jetCollection.value(), "ResUp" ],
                                    jetSmearFileName, jetSmearHistogram, varyByNsigmas,
-                                   -1.)        
+                                   -1., postfix=postfix)        
             collectionsToKeep.append(jetCollectionResUp)
 
             jetCollectionResDown = \
               self._addSmearedJets(process, cleanedJetCollection, [ "smeared", jetCollection.value(), "ResDown" ],
                                    jetSmearFileName, jetSmearHistogram, varyByNsigmas,
-                                   +1.)                
+                                   +1., postfix=postfix)                
             collectionsToKeep.append(jetCollectionResDown)
 
         collectionsToKeep.append(lastJetCollection)
@@ -347,7 +366,7 @@ class RunMEtUncertainties(ConfigToolBase
         jetCollectionEnUpForRawMEt = \
           self._addModuleToSequence(process, jetsEnUpForRawMEt,
                                     [ "shifted", jetCollection.value(), "EnUpForRawMEt" ],
-                                    process.metUncertaintySequence)
+                                    metUncertaintySequence, postfix)
         collectionsToKeep.append(jetCollectionEnUpForRawMEt)
         jetsEnDownForRawMEt = jetsEnUpForRawMEt.clone(
             shiftBy = cms.double(-1.*varyByNsigmas)
@@ -355,7 +374,7 @@ class RunMEtUncertainties(ConfigToolBase
         jetCollectionEnDownForRawMEt = \
           self._addModuleToSequence(process, jetsEnDownForRawMEt,
                                     [ "shifted", jetCollection.value(), "EnDownForRawMEt" ],
-                                    process.metUncertaintySequence) 
+                                    metUncertaintySequence, postfix) 
         collectionsToKeep.append(jetCollectionEnDownForRawMEt)
 
         jetsEnUpForCorrMEt = jetsEnUpForRawMEt.clone(
@@ -364,7 +383,7 @@ class RunMEtUncertainties(ConfigToolBase
         jetCollectionEnUpForCorrMEt = \
           self._addModuleToSequence(process, jetsEnUpForCorrMEt,
                                     [ "shifted", jetCollection.value(), "EnUpForCorrMEt" ],
-                                    process.metUncertaintySequence)
+                                    metUncertaintySequence, postfix)
         collectionsToKeep.append(jetCollectionEnUpForCorrMEt)
         jetsEnDownForCorrMEt = jetsEnUpForCorrMEt.clone(
             shiftBy = cms.double(-1.*varyByNsigmas)
@@ -372,7 +391,7 @@ class RunMEtUncertainties(ConfigToolBase
         jetCollectionEnDownForCorrMEt = \
           self._addModuleToSequence(process, jetsEnDownForCorrMEt,
                                     [ "shifted", jetCollection.value(), "EnDownForCorrMEt" ],
-                                    process.metUncertaintySequence) 
+                                    metUncertaintySequence, postfix) 
         collectionsToKeep.append(jetCollectionEnDownForCorrMEt)
 
         #--------------------------------------------------------------------------------------------
@@ -399,7 +418,7 @@ class RunMEtUncertainties(ConfigToolBase
             electronCollectionEnUp = \
               self._addModuleToSequence(process, electronsEnUp,
                                         [ "shifted", electronCollection.value(), "EnUp" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(electronCollectionEnUp)
             electronsEnDown = electronsEnUp.clone(
                 shiftBy = cms.double(-1.*varyByNsigmas)
@@ -407,7 +426,7 @@ class RunMEtUncertainties(ConfigToolBase
             electronCollectionEnDown = \
               self._addModuleToSequence(process, electronsEnDown,
                                         [ "shifted", electronCollection.value(), "EnDown" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(electronCollectionEnDown)
 
         #--------------------------------------------------------------------------------------------
@@ -434,7 +453,7 @@ class RunMEtUncertainties(ConfigToolBase
             photonCollectionEnUp = \
               self._addModuleToSequence(process, photonsEnUp,
                                         [ "shifted", photonCollection.value(), "EnUp" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(photonCollectionEnUp)
             photonsEnDown = photonsEnUp.clone(
                 shiftBy = cms.double(-1.*varyByNsigmas)
@@ -442,7 +461,7 @@ class RunMEtUncertainties(ConfigToolBase
             photonCollectionEnDown = \
               self._addModuleToSequence(process, photonsEnDown,
                                         [ "shifted", photonCollection.value(), "EnDown" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(photonCollectionEnDown)
 
         #--------------------------------------------------------------------------------------------
@@ -460,7 +479,7 @@ class RunMEtUncertainties(ConfigToolBase
             muonCollectionEnUp = \
               self._addModuleToSequence(process, muonsEnUp,
                                         [ "shifted", muonCollection.value(), "EnUp" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(muonCollectionEnUp)
             muonsEnDown = muonsEnUp.clone(
                 shiftBy = cms.double(-1.*varyByNsigmas)
@@ -468,7 +487,7 @@ class RunMEtUncertainties(ConfigToolBase
             muonCollectionEnDown = \
               self._addModuleToSequence(process, muonsEnDown,
                                         [ "shifted", muonCollection.value(), "EnDown" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(muonCollectionEnDown)
 
         #--------------------------------------------------------------------------------------------
@@ -486,7 +505,7 @@ class RunMEtUncertainties(ConfigToolBase
             tauCollectionEnUp = \
               self._addModuleToSequence(process, tausEnUp,
                                         [ "shifted", tauCollection.value(), "EnUp" ],
-                                        process.metUncertaintySequence)
+                                        metUncertaintySequence, postfix)
             collectionsToKeep.append(tauCollectionEnUp)
             tausEnDown = tausEnUp.clone(
                 shiftBy = cms.double(-1.*varyByNsigmas)
@@ -494,7 +513,7 @@ class RunMEtUncertainties(ConfigToolBase
             tauCollectionEnDown = \
               self._addModuleToSequence(process, tausEnDown,
                                         [ "shifted", tauCollection.value(), "EnDown" ],
-                                        process.metUncertaintySequence)     
+                                        metUncertaintySequence, postfix)     
             collectionsToKeep.append(tauCollectionEnDown)
 
         #--------------------------------------------------------------------------------------------    
@@ -504,14 +523,28 @@ class RunMEtUncertainties(ConfigToolBase
         # add "nominal" (unshifted) pat::MET collections
         if not hasattr(process, 'producePatPFMETCorrections'):
             process.load("PhysicsTools.PatUtils.patPFMETCorrections_cff")
-        process.pfCandsNotInJet.bottomCollection = pfCandCollection        
-        process.selectedPatJetsForMETtype1p2Corr.src = lastJetCollection
-        process.selectedPatJetsForMETtype2Corr.src = lastJetCollection
-        process.metUncertaintySequence += process.producePatPFMETCorrections
+        # If with empty postfix, make a backup of
+        # process.producePatPFMETCorrections, because the original
+        # sequence will be modified later in this function
+        if postfix == "":
+            configtools.cloneProcessingSnippet(process, process.producePatPFMETCorrections, "OriginalReserved")
+        else:
+            if postfix == "OriginalReserved":
+                raise ValueError("Postfix label '%s' is reserved for internal usage !!" % postfix)
+
+            if hasattr(process, "producePatPFMETCorrectionsOriginalReserved"):
+                configtools.cloneProcessingSnippet(process, process.producePatPFMETCorrectionsOriginalReserved, postfix, removePostfix="OriginalReserved")
+            else:
+                configtools.cloneProcessingSnippet(process, process.producePatPFMETCorrections, postfix)
+        
+        getattr(process, "pfCandsNotInJet"+postfix).bottomCollection = pfCandCollection        
+        getattr(process, "selectedPatJetsForMETtype1p2Corr"+postfix).src = lastJetCollection
+        getattr(process, "selectedPatJetsForMETtype2Corr"+postfix).src = lastJetCollection
+        metUncertaintySequence += getattr(process, "producePatPFMETCorrections"+postfix)
         collectionsToKeep.extend([
-            'patPFMet',
-            'patType1CorrectedPFMet',
-            'patType1p2CorrectedPFMet'])
+            'patPFMet'+postfix,
+            'patType1CorrectedPFMet'+postfix,
+            'patType1p2CorrectedPFMet'+postfix])
 
         # split jet collections into |jetEta| < 4.7 and |jetEta| > 4.7 parts
         #
@@ -521,176 +554,177 @@ class RunMEtUncertainties(ConfigToolBase
         #         https://hypernews.cern.ch/HyperNews/CMS/get/jes/270.html
         #         https://hypernews.cern.ch/HyperNews/CMS/get/JetMET/1259/1.html )
         #
-        process.selectedPatJetsForMETtype1p2CorrEnUp = getattr(process, jetCollectionEnUpForCorrMEt).clone(
-            src = cms.InputTag('selectedPatJetsForMETtype1p2Corr')
-        )
-        process.metUncertaintySequence += process.selectedPatJetsForMETtype1p2CorrEnUp
-        process.selectedPatJetsForMETtype2CorrEnUp = getattr(process, jetCollectionEnUpForCorrMEt).clone(
-            src = cms.InputTag('selectedPatJetsForMETtype2Corr')
-        )
-        process.metUncertaintySequence += process.selectedPatJetsForMETtype2CorrEnUp
-        process.selectedPatJetsForMETtype1p2CorrEnDown = getattr(process, jetCollectionEnDownForCorrMEt).clone(
-            src = cms.InputTag('selectedPatJetsForMETtype1p2Corr')
-        )
-        process.metUncertaintySequence += process.selectedPatJetsForMETtype1p2CorrEnDown
-        process.selectedPatJetsForMETtype2CorrEnDown = getattr(process, jetCollectionEnDownForCorrMEt).clone(
-            src = cms.InputTag('selectedPatJetsForMETtype2Corr')
-        )
-        process.metUncertaintySequence += process.selectedPatJetsForMETtype2CorrEnDown    
+        setattr(process, "selectedPatJetsForMETtype1p2CorrEnUp"+postfix, getattr(process, jetCollectionEnUpForCorrMEt).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype1p2Corr'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype1p2CorrEnUp"+postfix)
+        setattr(process, "selectedPatJetsForMETtype2CorrEnUp"+postfix, getattr(process, jetCollectionEnUpForCorrMEt).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype2Corr'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype2CorrEnUp"+postfix)
+        setattr(process, "selectedPatJetsForMETtype1p2CorrEnDown"+postfix, getattr(process, jetCollectionEnDownForCorrMEt).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype1p2Corr'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype1p2CorrEnDown"+postfix)
+        setattr(process, "selectedPatJetsForMETtype2CorrEnDown"+postfix, getattr(process, jetCollectionEnDownForCorrMEt).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype2Corr'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype2CorrEnDown"+postfix)
 
         if doSmearJets:
-            process.selectedPatJetsForMETtype1p2CorrResUp = getattr(process, jetCollectionResUp).clone(
-                src = cms.InputTag('selectedPatJetsForMETtype1p2Corr')
-            )
-            process.metUncertaintySequence += process.selectedPatJetsForMETtype1p2CorrResUp
-            process.selectedPatJetsForMETtype2CorrResUp = getattr(process, jetCollectionResUp).clone(
-                src = cms.InputTag('selectedPatJetsForMETtype2Corr')
-            )
-            process.metUncertaintySequence += process.selectedPatJetsForMETtype2CorrResUp
-            process.selectedPatJetsForMETtype1p2CorrResDown = getattr(process, jetCollectionResDown).clone(
-                src = cms.InputTag('selectedPatJetsForMETtype1p2Corr')
-            )
-            process.metUncertaintySequence += process.selectedPatJetsForMETtype1p2CorrResDown
-            process.selectedPatJetsForMETtype2CorrResDown = getattr(process, jetCollectionResDown).clone(
-                src = cms.InputTag('selectedPatJetsForMETtype2Corr')
-            )
-            process.metUncertaintySequence += process.selectedPatJetsForMETtype2CorrResDown
+            setattr(process, "selectedPatJetsForMETtype1p2CorrResUp"+postfix, getattr(process, jetCollectionResUp).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype1p2Corr'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype1p2CorrResUp"+postfix)
+            setattr(process, "selectedPatJetsForMETtype2CorrResUp"+postfix, getattr(process, jetCollectionResUp).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype2Corr'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype2CorrResUp"+postfix)
+            setattr(process, "selectedPatJetsForMETtype1p2CorrResDown"+postfix, getattr(process, jetCollectionResDown).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype1p2Corr'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype1p2CorrResDown"+postfix)
+            setattr(process, "selectedPatJetsForMETtype2CorrResDown"+postfix, getattr(process, jetCollectionResDown).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype2Corr'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "selectedPatJetsForMETtype2CorrResDown"+postfix)
 
         if doSmearJets:
             # apply MET smearing to "raw" (uncorrected) MET
-            process.smearedPatPFMetSequence = cms.Sequence()
-            process.patPFMetForMEtUncertainty = process.patPFMet.clone()
-            process.smearedPatPFMetSequence += process.patPFMetForMEtUncertainty
-            process.patPFMETcorrJetSmearing = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
+            smearedPatPFMetSequence = cms.Sequence()
+            setattr(process, "smearedPatPFMetSequence"+postfix, smearedPatPFMetSequence)
+            setattr(process, "patPFMetForMEtUncertainty"+postfix, getattr(process, "patPFMet"+postfix).clone())
+            smearedPatPFMetSequence += getattr(process, "patPFMetForMEtUncertainty"+postfix)
+            setattr(process, "patPFMETcorrJetSmearing"+postfix, cms.EDProducer("ShiftedParticleMETcorrInputProducer",
                 srcOriginal = cms.InputTag(cleanedJetCollection),
                 srcShifted = cms.InputTag(lastJetCollection)                                           
-            )
-            process.smearedPatPFMetSequence += process.patPFMETcorrJetSmearing
-            process.producePatPFMETCorrections.replace(process.patPFMet, process.smearedPatPFMetSequence)
-            process.patPFMet = process.patType1CorrectedPFMet.clone(
-                src = cms.InputTag('patPFMetForMEtUncertainty'),
+            ))
+            smearedPatPFMetSequence += getattr(process, "patPFMETcorrJetSmearing"+postfix)
+            getattr(process, "producePatPFMETCorrections"+postfix).replace(getattr(process, "patPFMet"+postfix), smearedPatPFMetSequence)
+            setattr(process, "patPFMet"+postfix, getattr(process, "patType1CorrectedPFMet"+postfix).clone(
+                src = cms.InputTag('patPFMetForMEtUncertainty'+postfix),
                 srcType1Corrections = cms.VInputTag(
-                    cms.InputTag('patPFMETcorrJetSmearing')
+                    cms.InputTag('patPFMETcorrJetSmearing'+postfix)
                 )
-            )
-            process.smearedPatPFMetSequence += process.patPFMet
-            process.metUncertaintySequence += process.smearedPatPFMetSequence 
+            ))
+            smearedPatPFMetSequence += getattr(process, "patPFMet"+postfix)
+            metUncertaintySequence += smearedPatPFMetSequence 
 
         # propagate shifts in jet energy to "raw" (uncorrected) and Type 1 corrected MET
         metCollectionsUp_DownForRawMEt = \
             self._propagateMEtUncertainties(
                 process, lastJetCollection, "Jet", "En", jetCollectionEnUpForRawMEt, jetCollectionEnDownForRawMEt,
-                process.patPFMet, process.metUncertaintySequence)
+                getattr(process, "patPFMet"+postfix), metUncertaintySequence, postfix)
         collectionsToKeep.extend(metCollectionsUp_DownForRawMEt)
 
         metCollectionsUp_DownForCorrMEt = \
             self._propagateMEtUncertainties(
                 process, lastJetCollection, "Jet", "En", jetCollectionEnUpForCorrMEt, jetCollectionEnDownForCorrMEt,
-                process.patType1CorrectedPFMet, process.metUncertaintySequence)
+                getattr(process, "patType1CorrectedPFMet"+postfix), metUncertaintySequence, postfix)
         collectionsToKeep.extend(metCollectionsUp_DownForCorrMEt)
 
         # propagate shifts in jet energy to Type 1 + 2 corrected MET
-        process.patPFJetMETtype1p2CorrEnUp = process.patPFJetMETtype1p2Corr.clone(
-            src = cms.InputTag(process.selectedPatJetsForMETtype1p2CorrEnUp.label()),
+        setattr(process, "patPFJetMETtype1p2CorrEnUp"+postfix, getattr(process, "patPFJetMETtype1p2Corr"+postfix).clone(
+            src = cms.InputTag(getattr(process, "selectedPatJetsForMETtype1p2CorrEnUp"+postfix).label()),
             jetCorrLabel = cms.string(jetCorrLabel)
-        )
-        process.metUncertaintySequence += process.patPFJetMETtype1p2CorrEnUp
-        process.patPFJetMETtype2CorrEnUp = process.patPFJetMETtype2Corr.clone(
-            src = cms.InputTag('selectedPatJetsForMETtype2CorrEnUp')
-        )
-        process.metUncertaintySequence += process.patPFJetMETtype2CorrEnUp
-        process.patPFJetMETtype1p2CorrEnDown = process.patPFJetMETtype1p2CorrEnUp.clone(
-            src = cms.InputTag(process.selectedPatJetsForMETtype1p2CorrEnDown.label())
-        )
-        process.metUncertaintySequence += process.patPFJetMETtype1p2CorrEnDown
-        process.patPFJetMETtype2CorrEnDown = process.patPFJetMETtype2Corr.clone(
-            src = cms.InputTag('selectedPatJetsForMETtype2CorrEnDown')
-        )
-        process.metUncertaintySequence += process.patPFJetMETtype2CorrEnDown
+        ))
+        metUncertaintySequence += getattr(process, "patPFJetMETtype1p2CorrEnUp"+postfix)
+        setattr(process, "patPFJetMETtype2CorrEnUp"+postfix, getattr(process, "patPFJetMETtype2Corr"+postfix).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype2CorrEnUp'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "patPFJetMETtype2CorrEnUp"+postfix)
+        setattr(process, "patPFJetMETtype1p2CorrEnDown"+postfix, getattr(process, "patPFJetMETtype1p2CorrEnUp"+postfix).clone(
+            src = cms.InputTag(getattr(process, "selectedPatJetsForMETtype1p2CorrEnDown"+postfix).label())
+        ))
+        metUncertaintySequence += getattr(process, "patPFJetMETtype1p2CorrEnDown"+postfix)
+        setattr(process, "patPFJetMETtype2CorrEnDown"+postfix, getattr(process, "patPFJetMETtype2Corr"+postfix).clone(
+            src = cms.InputTag('selectedPatJetsForMETtype2CorrEnDown'+postfix)
+        ))
+        metUncertaintySequence += getattr(process, "patPFJetMETtype2CorrEnDown"+postfix)
         
-        process.patType1p2CorrectedPFMetJetEnUp = process.patType1p2CorrectedPFMet.clone(
+        setattr(process, "patType1p2CorrectedPFMetJetEnUp"+postfix, getattr(process, "patType1p2CorrectedPFMet"+postfix).clone(
             srcType1Corrections = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2CorrEnUp', 'type1')
+                cms.InputTag('patPFJetMETtype1p2CorrEnUp'+postfix, 'type1')
             ),
             srcUnclEnergySums = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2CorrEnUp', 'type2' ),
-                cms.InputTag('patPFJetMETtype2CorrEnUp',   'type2' ),
-                cms.InputTag('patPFJetMETtype1p2CorrEnUp', 'offset'),
-                cms.InputTag('pfCandMETcorr')                                    
-            )
-        )
-        process.metUncertaintySequence += process.patType1p2CorrectedPFMetJetEnUp
-        collectionsToKeep.append('patType1p2CorrectedPFMetJetEnUp')
-        process.patType1p2CorrectedPFMetJetEnDown = process.patType1p2CorrectedPFMetJetEnUp.clone(
+                cms.InputTag('patPFJetMETtype1p2CorrEnUp'+postfix, 'type2' ),
+                cms.InputTag('patPFJetMETtype2CorrEnUp'+postfix,   'type2' ),
+                cms.InputTag('patPFJetMETtype1p2CorrEnUp'+postfix, 'offset'),
+                cms.InputTag('pfCandMETcorr'+postfix)                                    
+            )
+        ))
+        metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetJetEnUp"+postfix)
+        collectionsToKeep.append('patType1p2CorrectedPFMetJetEnUp'+postfix)
+        setattr(process, "patType1p2CorrectedPFMetJetEnDown"+postfix, getattr(process, "patType1p2CorrectedPFMetJetEnUp"+postfix).clone(
             srcType1Corrections = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2CorrEnDown', 'type1')
+                cms.InputTag('patPFJetMETtype1p2CorrEnDown'+postfix, 'type1')
             ),
             srcUnclEnergySums = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2CorrEnDown', 'type2' ),
-                cms.InputTag('patPFJetMETtype2CorrEnDown',   'type2' ),
-                cms.InputTag('patPFJetMETtype1p2CorrEnDown', 'offset'),
-                cms.InputTag('pfCandMETcorr')                                    
-            )
-        )
-        process.metUncertaintySequence += process.patType1p2CorrectedPFMetJetEnDown
-        collectionsToKeep.append('patType1p2CorrectedPFMetJetEnDown')
+                cms.InputTag('patPFJetMETtype1p2CorrEnDown'+postfix, 'type2' ),
+                cms.InputTag('patPFJetMETtype2CorrEnDown'+postfix,   'type2' ),
+                cms.InputTag('patPFJetMETtype1p2CorrEnDown'+postfix, 'offset'),
+                cms.InputTag('pfCandMETcorr'+postfix)                                    
+            )
+        ))
+        metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetJetEnDown"+postfix)
+        collectionsToKeep.append('patType1p2CorrectedPFMetJetEnDown'+postfix)
 
         if doSmearJets:
             # propagate shifts in jet resolution to "raw" (uncorrected) MET and Type 1 corrected MET
-            for metProducer in [ process.patPFMet,
-                                 process.patType1CorrectedPFMet ]:
+            for metProducer in [ getattr(process, "patPFMet"+postfix),
+                                 getattr(process, "patType1CorrectedPFMet"+postfix) ]:
 
                 metCollectionsUp_Down = \
                     self._propagateMEtUncertainties(
                         process, lastJetCollection, "Jet", "Res", jetCollectionResUp, jetCollectionResDown,
-                        metProducer, process.metUncertaintySequence)
+                        metProducer, metUncertaintySequence, postfix)
                 collectionsToKeep.extend(metCollectionsUp_Down)
             
             # propagate shifts in jet resolution to Type 1 + 2 corrected MET 
-            process.patPFJetMETtype1p2CorrResUp = process.patPFJetMETtype1p2Corr.clone(
-                src = cms.InputTag(process.selectedPatJetsForMETtype1p2CorrResUp.label()),
+            setattr(process, "patPFJetMETtype1p2CorrResUp"+postfix, getattr(process, "patPFJetMETtype1p2Corr"+postfix).clone(
+                src = cms.InputTag(getattr(process, "selectedPatJetsForMETtype1p2CorrResUp"+postfix).label()),
                 jetCorrLabel = cms.string(jetCorrLabel)
-            )
-            process.metUncertaintySequence += process.patPFJetMETtype1p2CorrResUp
-            process.patPFJetMETtype2CorrResUp = process.patPFJetMETtype2Corr.clone(
-                src = cms.InputTag('selectedPatJetsForMETtype2CorrResUp')
-            )
-            process.metUncertaintySequence += process.patPFJetMETtype2CorrResUp
-            process.patPFJetMETtype1p2CorrResDown = process.patPFJetMETtype1p2CorrResUp.clone(
-                src = cms.InputTag(process.selectedPatJetsForMETtype1p2CorrResDown.label())
-            )
-            process.metUncertaintySequence += process.patPFJetMETtype1p2CorrResDown
-            process.patPFJetMETtype2CorrResDown = process.patPFJetMETtype2Corr.clone(
-                src = cms.InputTag('selectedPatJetsForMETtype2CorrResDown')
-            )
-            process.metUncertaintySequence += process.patPFJetMETtype2CorrResDown
+            ))
+            metUncertaintySequence += getattr(process, "patPFJetMETtype1p2CorrResUp"+postfix)
+            setattr(process, "patPFJetMETtype2CorrResUp"+postfix, getattr(process, "patPFJetMETtype2Corr"+postfix).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype2CorrResUp'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "patPFJetMETtype2CorrResUp"+postfix)
+            setattr(process, "patPFJetMETtype1p2CorrResDown"+postfix, getattr(process, "patPFJetMETtype1p2CorrResUp"+postfix).clone(
+                src = cms.InputTag(getattr(process, "selectedPatJetsForMETtype1p2CorrResDown"+postfix).label())
+            ))
+            metUncertaintySequence += getattr(process, "patPFJetMETtype1p2CorrResDown"+postfix)
+            setattr(process, "patPFJetMETtype2CorrResDown"+postfix, getattr(process, "patPFJetMETtype2Corr"+postfix).clone(
+                src = cms.InputTag('selectedPatJetsForMETtype2CorrResDown'+postfix)
+            ))
+            metUncertaintySequence += getattr(process, "patPFJetMETtype2CorrResDown"+postfix)
 
-            process.patType1p2CorrectedPFMetJetResUp = process.patType1p2CorrectedPFMet.clone(
+            setattr(process, "patType1p2CorrectedPFMetJetResUp"+postfix, getattr(process, "patType1p2CorrectedPFMet"+postfix).clone(
                 srcType1Corrections = cms.VInputTag(
-                    cms.InputTag('patPFJetMETtype1p2CorrResUp', 'type1')
+                    cms.InputTag('patPFJetMETtype1p2CorrResUp'+postfix, 'type1')
                 ),
                 srcUnclEnergySums = cms.VInputTag(
-                    cms.InputTag('patPFJetMETtype1p2CorrResUp', 'type2' ),
-                    cms.InputTag('patPFJetMETtype2CorrResUp',   'type2' ),
-                    cms.InputTag('patPFJetMETtype1p2CorrResUp', 'offset'),
-                    cms.InputTag('pfCandMETcorr')                                    
+                    cms.InputTag('patPFJetMETtype1p2CorrResUp'+postfix, 'type2' ),
+                    cms.InputTag('patPFJetMETtype2CorrResUp'+postfix,   'type2' ),
+                    cms.InputTag('patPFJetMETtype1p2CorrResUp'+postfix, 'offset'),
+                    cms.InputTag('pfCandMETcorr'+postfix)                                    
                 )
-            )
-            process.metUncertaintySequence += process.patType1p2CorrectedPFMetJetResUp
-            collectionsToKeep.append('patType1p2CorrectedPFMetJetResUp')
-            process.patType1p2CorrectedPFMetJetResDown = process.patType1p2CorrectedPFMetJetResUp.clone(
+            ))
+            metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetJetResUp"+postfix)
+            collectionsToKeep.append('patType1p2CorrectedPFMetJetResUp'+postfix)
+            setattr(process, "patType1p2CorrectedPFMetJetResDown"+postfix, getattr(process, "patType1p2CorrectedPFMetJetResUp"+postfix).clone(
                 srcType1Corrections = cms.VInputTag(
-                    cms.InputTag('patPFJetMETtype1p2CorrResDown', 'type1')
+                    cms.InputTag('patPFJetMETtype1p2CorrResDown'+postfix, 'type1')
                 ),
                 srcUnclEnergySums = cms.VInputTag(
-                    cms.InputTag('patPFJetMETtype1p2CorrResDown', 'type2' ),
-                    cms.InputTag('patPFJetMETtype2CorrResDown',   'type2' ),
-                    cms.InputTag('patPFJetMETtype1p2CorrResDown', 'offset'),
-                    cms.InputTag('pfCandMETcorr')                                    
+                    cms.InputTag('patPFJetMETtype1p2CorrResDown'+postfix, 'type2' ),
+                    cms.InputTag('patPFJetMETtype2CorrResDown'+postfix,   'type2' ),
+                    cms.InputTag('patPFJetMETtype1p2CorrResDown'+postfix, 'offset'),
+                    cms.InputTag('pfCandMETcorr'+postfix)                                    
                 )
-            )
-            process.metUncertaintySequence += process.patType1p2CorrectedPFMetJetResDown
-            collectionsToKeep.append('patType1p2CorrectedPFMetJetResDown')
+            ))
+            metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetJetResDown"+postfix)
+            collectionsToKeep.append('patType1p2CorrectedPFMetJetResDown'+postfix)
 
         #--------------------------------------------------------------------------------------------
         # shift "unclustered energy" (PFJets of Pt < 10 GeV plus PFCandidates not within jets)
@@ -698,9 +732,9 @@ class RunMEtUncertainties(ConfigToolBase
         #--------------------------------------------------------------------------------------------
 
         unclEnMETcorrections = [
-            [ 'pfCandMETcorr', [ '' ] ],
-            [ 'patPFJetMETtype1p2Corr', [ 'type2', 'offset' ] ],
-            [ 'patPFJetMETtype2Corr', [ 'type2' ] ],
+            [ 'pfCandMETcorr'+postfix, [ '' ] ],
+            [ 'patPFJetMETtype1p2Corr'+postfix, [ 'type2', 'offset' ] ],
+            [ 'patPFJetMETtype2Corr'+postfix, [ 'type2' ] ],
         ]
         unclEnMETcorrectionsUp = []
         unclEnMETcorrectionsDown = []
@@ -712,117 +746,125 @@ class RunMEtUncertainties(ConfigToolBase
                 uncertainty = cms.double(0.10),
                 shiftBy = cms.double(+1.*varyByNsigmas)
             )
-            moduleUnclEnMETcorrUpName = "%sUnclusteredEnUp" % srcUnclEnMETcorr[0]
+            baseName = srcUnclEnMETcorr[0]
+            if postfix != "":
+                if baseName[-len(postfix):] == postfix:
+                    baseName = baseName[0:-len(postfix)]
+                else:
+                    raise StandardError("Tried to remove postfix %s from label %s, but it wasn't there" % (postfix, baseName))
+            moduleUnclEnMETcorrUpName = "%sUnclusteredEnUp" % baseName
+            moduleUnclEnMETcorrUpName += postfix
             setattr(process, moduleUnclEnMETcorrUpName, moduleUnclEnMETcorrUp)
-            process.metUncertaintySequence += moduleUnclEnMETcorrUp
+            metUncertaintySequence += moduleUnclEnMETcorrUp
             unclEnMETcorrectionsUp.extend([ cms.InputTag(moduleUnclEnMETcorrUpName, instanceLabel)
                                             for instanceLabel in srcUnclEnMETcorr[1] ] )
             moduleUnclEnMETcorrDown = moduleUnclEnMETcorrUp.clone(
                 shiftBy = cms.double(-1.*varyByNsigmas)
             )
-            moduleUnclEnMETcorrDownName = "%sUnclusteredEnDown" % srcUnclEnMETcorr[0]
+            moduleUnclEnMETcorrDownName = "%sUnclusteredEnDown" % baseName
+            moduleUnclEnMETcorrDownName += postfix
             setattr(process, moduleUnclEnMETcorrDownName, moduleUnclEnMETcorrDown)
-            process.metUncertaintySequence += moduleUnclEnMETcorrDown
+            metUncertaintySequence += moduleUnclEnMETcorrDown
             unclEnMETcorrectionsDown.extend([ cms.InputTag(moduleUnclEnMETcorrDownName, instanceLabel)
                                               for instanceLabel in srcUnclEnMETcorr[1] ] )
 
         # propagate shifts in jet energy/resolution to "raw" (uncorrected) MET    
-        process.patPFMetUnclusteredEnUp = process.patType1CorrectedPFMet.clone(
-            src = cms.InputTag('patPFMet'),
+        setattr(process, "patPFMetUnclusteredEnUp"+postfix, getattr(process, "patType1CorrectedPFMet"+postfix).clone(
+            src = cms.InputTag('patPFMet'+postfix),
             srcType1Corrections = cms.VInputTag(unclEnMETcorrectionsUp)
-        )
-        process.metUncertaintySequence += process.patPFMetUnclusteredEnUp
-        collectionsToKeep.append('patPFMetUnclusteredEnUp')
-        process.patPFMetUnclusteredEnDown = process.patPFMetUnclusteredEnUp.clone(
+        ))
+        metUncertaintySequence += getattr(process, "patPFMetUnclusteredEnUp"+postfix)
+        collectionsToKeep.append('patPFMetUnclusteredEnUp'+postfix)
+        setattr(process, "patPFMetUnclusteredEnDown"+postfix, getattr(process, "patPFMetUnclusteredEnUp"+postfix).clone(
             srcType1Corrections = cms.VInputTag(unclEnMETcorrectionsDown)
-        )
-        process.metUncertaintySequence += process.patPFMetUnclusteredEnDown
-        collectionsToKeep.append('patPFMetUnclusteredEnDown')        
+        ))
+        metUncertaintySequence += getattr(process, "patPFMetUnclusteredEnDown"+postfix)
+        collectionsToKeep.append('patPFMetUnclusteredEnDown'+postfix)
 
         # propagate shifts in jet energy/resolution to Type 1 corrected MET
-        process.patType1CorrectedPFMetUnclusteredEnUp = process.patType1CorrectedPFMet.clone(
-            src = cms.InputTag('patType1CorrectedPFMet'),
+        setattr(process, "patType1CorrectedPFMetUnclusteredEnUp"+postfix, getattr(process, "patType1CorrectedPFMet"+postfix).clone(
+            src = cms.InputTag('patType1CorrectedPFMet'+postfix),
             srcType1Corrections = cms.VInputTag(unclEnMETcorrectionsUp)
-        )
-        process.metUncertaintySequence += process.patType1CorrectedPFMetUnclusteredEnUp
-        collectionsToKeep.append('patType1CorrectedPFMetUnclusteredEnUp')
-        process.patType1CorrectedPFMetUnclusteredEnDown = process.patType1CorrectedPFMetUnclusteredEnUp.clone(
+        ))
+        metUncertaintySequence += getattr(process, "patType1CorrectedPFMetUnclusteredEnUp"+postfix)
+        collectionsToKeep.append('patType1CorrectedPFMetUnclusteredEnUp'+postfix)
+        setattr(process, "patType1CorrectedPFMetUnclusteredEnDown"+postfix, getattr(process, "patType1CorrectedPFMetUnclusteredEnUp"+postfix).clone(
             srcType1Corrections = cms.VInputTag(unclEnMETcorrectionsDown)
-        )
-        process.metUncertaintySequence += process.patType1CorrectedPFMetUnclusteredEnDown
-        collectionsToKeep.append('patType1CorrectedPFMetUnclusteredEnDown')
+        ))
+        metUncertaintySequence += getattr(process, "patType1CorrectedPFMetUnclusteredEnDown"+postfix)
+        collectionsToKeep.append('patType1CorrectedPFMetUnclusteredEnDown'+postfix)
         
         # propagate shifts in jet energy/resolution to Type 1 + 2 corrected MET
-        process.patType1p2CorrectedPFMetUnclusteredEnUp = process.patType1p2CorrectedPFMet.clone(
+        setattr(process, "patType1p2CorrectedPFMetUnclusteredEnUp"+postfix, getattr(process, "patType1p2CorrectedPFMet"+postfix).clone(
             srcUnclEnergySums = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2Corr',                'type2' ),
-                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnUp', 'type2' ),
-                cms.InputTag('patPFJetMETtype2Corr',                  'type2' ),   
-                cms.InputTag('patPFJetMETtype2CorrUnclusteredEnUp',   'type2' ),
-                cms.InputTag('patPFJetMETtype1p2Corr',                'offset'),
-                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnUp', 'offset'),
-                cms.InputTag('pfCandMETcorr'),
-                cms.InputTag('pfCandMETcorrUnclusteredEnUp')                                    
-            )
-        )
-        process.metUncertaintySequence += process.patType1p2CorrectedPFMetUnclusteredEnUp
-        collectionsToKeep.append('patType1p2CorrectedPFMetUnclusteredEnUp')
-        process.patType1p2CorrectedPFMetUnclusteredEnDown = process.patType1p2CorrectedPFMetUnclusteredEnUp.clone(
+                cms.InputTag('patPFJetMETtype1p2Corr'+postfix,                'type2' ),
+                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnUp'+postfix, 'type2' ),
+                cms.InputTag('patPFJetMETtype2Corr'+postfix,                  'type2' ),   
+                cms.InputTag('patPFJetMETtype2CorrUnclusteredEnUp'+postfix,   'type2' ),
+                cms.InputTag('patPFJetMETtype1p2Corr'+postfix,                'offset'),
+                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnUp'+postfix, 'offset'),
+                cms.InputTag('pfCandMETcorr'+postfix),
+                cms.InputTag('pfCandMETcorrUnclusteredEnUp'+postfix)                                    
+            )
+        ))
+        metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetUnclusteredEnUp"+postfix)
+        collectionsToKeep.append('patType1p2CorrectedPFMetUnclusteredEnUp'+postfix)
+        setattr(process, "patType1p2CorrectedPFMetUnclusteredEnDown"+postfix, getattr(process, "patType1p2CorrectedPFMetUnclusteredEnUp"+postfix).clone(
             srcUnclEnergySums = cms.VInputTag(
-                cms.InputTag('patPFJetMETtype1p2Corr',                  'type2' ),
-                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnDown', 'type2' ),
-                cms.InputTag('patPFJetMETtype2Corr',                    'type2' ),  
-                cms.InputTag('patPFJetMETtype2CorrUnclusteredEnDown',   'type2' ),
-                cms.InputTag('patPFJetMETtype1p2Corr',                  'offset'),
-                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnDown', 'offset'),
-                cms.InputTag('pfCandMETcorr'),
-                cms.InputTag('pfCandMETcorrUnclusteredEnDown')                                    
-            )
-        )
-        process.metUncertaintySequence += process.patType1p2CorrectedPFMetUnclusteredEnDown
-        collectionsToKeep.append('patType1p2CorrectedPFMetUnclusteredEnDown')
+                cms.InputTag('patPFJetMETtype1p2Corr'+postfix,                  'type2' ),
+                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnDown'+postfix, 'type2' ),
+                cms.InputTag('patPFJetMETtype2Corr'+postfix,                    'type2' ),  
+                cms.InputTag('patPFJetMETtype2CorrUnclusteredEnDown'+postfix,   'type2' ),
+                cms.InputTag('patPFJetMETtype1p2Corr'+postfix,                  'offset'),
+                cms.InputTag('patPFJetMETtype1p2CorrUnclusteredEnDown'+postfix, 'offset'),
+                cms.InputTag('pfCandMETcorr'+postfix),
+                cms.InputTag('pfCandMETcorrUnclusteredEnDown'+postfix)                                    
+            )
+        ))
+        metUncertaintySequence += getattr(process, "patType1p2CorrectedPFMetUnclusteredEnDown"+postfix)
+        collectionsToKeep.append('patType1p2CorrectedPFMetUnclusteredEnDown'+postfix)
 
         #--------------------------------------------------------------------------------------------    
         # propagate shifted electron/photon, muon and tau-jet energies to MET
         #--------------------------------------------------------------------------------------------
 
-        for metProducer in [ process.patPFMet,
-                             process.patType1CorrectedPFMet,
-                             process.patType1p2CorrectedPFMet ]:
+        for metProducer in [ getattr(process, "patPFMet"+postfix),
+                             getattr(process, "patType1CorrectedPFMet"+postfix),
+                             getattr(process, "patType1p2CorrectedPFMet"+postfix) ]:
             
             if self._isValidInputTag(electronCollection):
                 metCollectionsUp_Down = \
                     self._propagateMEtUncertainties(
                         process, electronCollection.value(), "Electron", "En", electronCollectionEnUp, electronCollectionEnDown,
-                        metProducer, process.metUncertaintySequence)
+                        metProducer, metUncertaintySequence, postfix)
                 collectionsToKeep.extend(metCollectionsUp_Down)
 
             if self._isValidInputTag(photonCollection):
                 metCollectionsUp_Down = \
                     self._propagateMEtUncertainties(
                         process, photonCollection.value(), "Photon", "En", photonCollectionEnUp, photonCollectionEnDown,
-                        metProducer, process.metUncertaintySequence)
+                        metProducer, metUncertaintySequence, postfix)
                 collectionsToKeep.extend(metCollectionsUp_Down)
                 
             if self._isValidInputTag(muonCollection):
                 metCollectionsUp_Down = \
                     self._propagateMEtUncertainties(
                         process, muonCollection.value(), "Muon", "En", muonCollectionEnUp, muonCollectionEnDown,
-                        metProducer, process.metUncertaintySequence)
+                        metProducer, metUncertaintySequence, postfix)
                 collectionsToKeep.extend(metCollectionsUp_Down)
 
             if self._isValidInputTag(tauCollection):
                 metCollectionsUp_Down = \
                     self._propagateMEtUncertainties(
                         process, tauCollection.value(), "Tau", "En", tauCollectionEnUp, tauCollectionEnDown,
-                        metProducer, process.metUncertaintySequence)
+                        metProducer, metUncertaintySequence, postfix)
                 collectionsToKeep.extend(metCollectionsUp_Down)
 
         # insert metUncertaintySequence into patDefaultSequence
         if addToPatDefaultSequence:
             if not hasattr(process, "patDefaultSequence"):
                 raise ValueError("PAT default sequence is not defined !!")
-            process.patDefaultSequence += process.metUncertaintySequence        
+            process.patDefaultSequence += metUncertaintySequence        
        
         # add shifted + unshifted collections pf pat::Electrons/Photons,
         # Muons, Taus, Jets and MET to PAT-tuple event content
